a = c(1, 2, 3)
rm(a)
a = c(1, 2, 3, 4)
b = c(1, 2, 3, 4)
cor(a, b, method='pearson')
b = c(4, 3, 2, 1)
cor(a, b, method='pearson')
b = c(3, 4, 2, 1)
cor(a, b, method='pearson')
b = c(3, 4, 1, 2)
cor(a, b, method='pearson')
b = c(3, 1, 4, 2)
cor(a, b, method='pearson')
cor(a, b, method='pearson')
b = c(3, 1, 2, 4)
cor(a, b, method='pearson')
b = c(1, 3, 2, 4)
cor(a, b, method='pearson')
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install("WGCNA")
BiocManager::install("WGCNA")
install.packages(c("flashClust"))
library(WGCNA)
library(flashClust)
library(WGCNA)
# Load training dataset
# dfTraining = read.csv('../data/nci_almanac_preprocessed/omics/split/merged_rnaseq_fpkm_prot_coding_train.csv.gz')
dfTraining = read.csv('../data/nci_almanac_preprocessed/omics/unmerged/rnaseq_fpkm_prot_coding.csv')
install.packages("BiocManager")
install.packages("BiocManager")
# # WGCNA
# The following code was copied from this tutorial: https://horvath.genetics.ucla.edu/html/CoexpressionNetwork/Rpackages/WGCNA/Tutorials/FemaleLiver-02-networkConstr-auto.pdf
# Choose a set of soft-thresholding powers
powers = c(c(1:10), seq(from = 12, to=20, by=2))
# Call the network topology analysis function
sft = pickSoftThreshold(dfTraining, powerVector = powers, verbose = 5)
install.packages("BiocManager")
BiocManager::install("WGCNA")
bbninstall.packages(c("flashClust"))
install.packages(c("flashClust"))
library(WGCNA)
library(flashClust)
# Load training dataset
# dfTraining = read.csv('../data/nci_almanac_preprocessed/omics/split/merged_rnaseq_fpkm_prot_coding_train.csv.gz')
dfTraining = read.csv('../data/nci_almanac_preprocessed/omics/unmerged/rnaseq_fpkm_prot_coding.csv')
dfTraining = dfTraining[, !(colnames(dfTraining) %in% c("CELLNAME"))]
# # WGCNA
# The following code was copied from this tutorial: https://horvath.genetics.ucla.edu/html/CoexpressionNetwork/Rpackages/WGCNA/Tutorials/FemaleLiver-02-networkConstr-auto.pdf
# Choose a set of soft-thresholding powers
powers = c(c(1:10), seq(from = 12, to=20, by=2))
# Call the network topology analysis function
sft = pickSoftThreshold(dfTraining, powerVector = powers, verbose = 5)
# Plot the results:
pdf(file = "../",   # The directory you want to save the file in
width = 4, # The width of the plot in inches
height = 4) # The height of the plot in inches
# Plot the results:
pdf(file = "../soft_threshold.pdf",   # The directory you want to save the file in
width = 4, # The width of the plot in inches
height = 4) # The height of the plot in inches
sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
dev.off()
sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
